% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solving-functions.R
\name{sde}
\alias{sde}
\title{Simulate stochastic differential equations on networks}
\usage{
sde(initialvalue, times, func, parms = list(), control = list())
}
\arguments{
\item{initialvalue}{The inital value of each variable/node, scalar or vector}

\item{times}{A sequence, at least the first and last time in user units, but e.g. 0:10 works and is easy.}

\item{func}{The dynamical model, in deSolve's format. Should return a deterministic derivative.}

\item{parms}{A list. Using deSolve's naming convention, the model parameters (including the adjacency matrix, if using). Must include an element called "sigma" for the standard deviation of the noise process.}

\item{control}{A list. Must include an element called "deltaT".}
}
\value{
A data frame
}
\description{
Simulate stochastic differential equations using the Euler-Maruyama method. Output mimics the output of deSolve's ode().
}
\details{
Returns a data frame that looks like deSolve's ode() output: a column of time steps, then a column of values at each timestep for each variable in the model.
}
\examples{
library(igraph)
g <- sample_gnm(10, 20)
N <- vcount(g)
A <- as_adj(g, "both", sparse = FALSE)
X <- sde(rep(.doublewell$xinit.low, N), 0:10, doublewell, c(.doublewell, list(A = A)), list(deltaT = 0.01))
}
