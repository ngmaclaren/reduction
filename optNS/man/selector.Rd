% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make-nodesets.R
\name{selector}
\alias{selector}
\alias{select_optimized}
\alias{select_randomized}
\alias{select_constrained}
\alias{select_knn_constrained}
\alias{select_quantiled}
\alias{select_bycommunity}
\alias{select_bydegseq}
\alias{make_dl}
\title{Functions to select sentinel node sets}
\usage{
select_optimized(
  n,
  g,
  y,
  Y,
  optimize_weights = FALSE,
  sorted = TRUE,
  maxit = NULL,
  trace = FALSE
)

select_randomized(n, g, y, Y, optimize_weights = FALSE, sorted = TRUE)

select_constrained(n, g, y, Y, optimize_weights = FALSE, sorted = TRUE)

select_knn_constrained(
  n,
  g,
  y,
  Y,
  optimize_weights = FALSE,
  sorted = TRUE,
  constrain = TRUE
)

select_quantiled(
  n,
  g,
  y,
  Y,
  optimize_weights = FALSE,
  sorted = TRUE,
  constrain = TRUE
)

select_bycommunity(
  n,
  g,
  y,
  Y,
  optimize_weights = FALSE,
  sorted = TRUE,
  constrain = TRUE
)

select_bydegseq(n, g, comps, y, Y, optimize_weights = FALSE, sorted = TRUE)

make_dl(vs, g, y, Y, k, optimize_weights = FALSE, ws = NULL, sorted = TRUE)
}
\arguments{
\item{n}{The number of nodes to use in the node set.}

\item{g}{The network from which the nodes will be drawn.}

\item{y}{The mean state of the nodes on the network at each value of the bifurcation parameter.}

\item{Y}{The state of all nodes at each value of the bifurcation parameter.}

\item{optimize_weights}{Whether or not to optimize node weights by quadratic programming.}

\item{sorted}{Whether or not to sort the nodes by degree in the returned list.}

\item{maxit}{The default is typically sufficient, but can be set here.}

\item{trace}{Whether or not to observe the progress of optim().}

\item{constrain}{Whether or not to remove the top 5\% largest nodes by degree}

\item{comps}{The node index sequence}

\item{vs}{A node set (numeric node indices)}

\item{k}{The degree distribution of a network; a numeric vector}

\item{ws}{A vector of node weights}
}
\value{
A list with the following elements: vs: The node set, a numeric vector of node indices; error: The approximation error for the node set; ks: The degree sequence; ws: NULL, or the weights assigned to each node if requested.
}
\description{
Each of these functions returns a node set along with some additional information. See details.
}
\details{
These functions all accept similar arguments and return the same data structure (i.e., n node indices, the associated approximation error, etc) but differ in the algorithm used to select the nodes. No algorithm accepts repeated nodes in the output.
\itemize{
\item select_optimized() uses combinatorial simulated annealing
\item select_randomized() selects nodes uniformly at random
\item select_constrained() removes the top 5\% of nodes by degree from consideration, then selects randomly.
\item select_knn_constrained() removes the bottom 5\% by average nearest neighbor degree and optionally the top 5\xs% by degree, then selects randomly
\item select_quantiled() divides the degree distribution into n bins and selects one node at random from each bin
\item select_bycommunity() assigns a weight to each node to encourage, but not require, selecting nodes from different communities.
\item select_bydegseq() accepts a set of nodes as an argument (\code{comps}) and returns a set of nodes with the same degree sequence, but which is otherwise random.
}

make_dl() accepts a node set \code{vs} and returns the standard data structure.
}
